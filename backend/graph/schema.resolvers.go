package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"time"

	"github.com/DodoroGit/My_Portfolio/backend/database"
	"github.com/DodoroGit/My_Portfolio/backend/graph/generated"
	"github.com/DodoroGit/My_Portfolio/backend/graph/model"
)

// 新增食物紀錄
func (r *mutationResolver) AddFoodLog(ctx context.Context, input model.FoodLogInput) (*model.FoodLog, error) {
	userID, ok := ctx.Value("user_id").(int)
	if !ok {
		return nil, fmt.Errorf("找不到登入使用者資訊")
	}

	if input.LoggedAt == nil {
		return nil, fmt.Errorf("請提供 loggedAt 日期")
	}

	t, err := time.Parse("2006-01-02", *input.LoggedAt)
	if err != nil {
		return nil, fmt.Errorf("日期格式錯誤：%v", err)
	}

	var insertedID int
	err = database.DB.QueryRow(`
		INSERT INTO food_logs (user_id, name, calories, protein, fat, carbs, quantity, logged_at)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
		RETURNING id`,
		userID, input.Name, input.Calories, input.Protein, input.Fat, input.Carbs, input.Quantity, t,
	).Scan(&insertedID)

	if err != nil {
		return nil, err
	}

	return &model.FoodLog{
		ID:       insertedID,
		Name:     input.Name,
		Calories: input.Calories,
		Protein:  input.Protein,
		Fat:      input.Fat,
		Carbs:    input.Carbs,
		Quantity: input.Quantity,
		LoggedAt: input.LoggedAt,
	}, nil
}

// DeleteFoodLog is the resolver for the deleteFoodLog field.
func (r *mutationResolver) DeleteFoodLog(ctx context.Context, id int) (bool, error) {
	userID, ok := ctx.Value("user_id").(int)
	if !ok {
		return false, fmt.Errorf("找不到登入使用者資訊")
	}

	result, err := database.DB.Exec(`DELETE FROM food_logs WHERE id = $1 AND user_id = $2`, id, userID)
	if err != nil {
		return false, err
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return false, err
	}

	return rowsAffected > 0, nil
}

// UpdateFoodLog is the resolver for the updateFoodLog field.
func (r *mutationResolver) UpdateFoodLog(ctx context.Context, id int, input model.FoodLogInput) (*model.FoodLog, error) {
	userID, ok := ctx.Value("user_id").(int)
	if !ok {
		return nil, fmt.Errorf("找不到登入使用者資訊")
	}

	if input.LoggedAt == nil {
		return nil, fmt.Errorf("請提供 loggedAt 日期")
	}
	t, err := time.Parse("2006-01-02", *input.LoggedAt)
	if err != nil {
		return nil, fmt.Errorf("日期格式錯誤：%v", err)
	}

	result, err := database.DB.Exec(`
		UPDATE food_logs 
		SET name = $1, calories = $2, protein = $3, fat = $4, carbs = $5, quantity = $6, logged_at = $7
		WHERE id = $8 AND user_id = $9`,
		input.Name, input.Calories, input.Protein, input.Fat, input.Carbs, input.Quantity, t, id, userID,
	)
	if err != nil {
		return nil, err
	}

	rowsAffected, _ := result.RowsAffected()
	if rowsAffected == 0 {
		return nil, fmt.Errorf("找不到符合的紀錄或無權限")
	}

	return &model.FoodLog{
		ID:       id,
		Name:     input.Name,
		Calories: input.Calories,
		Protein:  input.Protein,
		Fat:      input.Fat,
		Carbs:    input.Carbs,
		Quantity: input.Quantity,
		LoggedAt: input.LoggedAt,
	}, nil
}

// 查詢食物紀錄
func (r *queryResolver) MyFoodLogs(ctx context.Context) ([]*model.FoodLog, error) {
	userID, ok := ctx.Value("user_id").(int)
	if !ok {
		return nil, fmt.Errorf("找不到登入使用者資訊")
	}

	rows, err := database.DB.Query(`
		SELECT id, name, calories, protein, fat, carbs, quantity, logged_at
		FROM food_logs WHERE user_id = $1`, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var logs []*model.FoodLog
	for rows.Next() {
		var f model.FoodLog
		var t time.Time
		if err := rows.Scan(&f.ID, &f.Name, &f.Calories, &f.Protein, &f.Fat, &f.Carbs, &f.Quantity, &t); err != nil {
			continue
		}
		formatted := t.Format("2006-01-02")
		f.LoggedAt = &formatted
		logs = append(logs, &f)
	}
	return logs, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
